version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: analytics_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-analytics}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-analytics123}
      POSTGRES_DB: ${POSTGRES_DB:-analytics_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init_retail_banking.sql:/docker-entrypoint-initdb.d/init_retail_banking.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-analytics} -d ${POSTGRES_DB:-analytics_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      bash -c "
        docker-entrypoint.sh postgres &
        until pg_isready -U ${POSTGRES_USER:-analytics} -d ${POSTGRES_DB:-analytics_db}; do
          echo 'Waiting for postgres...'
          sleep 1
        done
        psql -U ${POSTGRES_USER:-analytics} -d ${POSTGRES_DB:-analytics_db} -c 'CREATE DATABASE analytics_db;' || true
        wait
      "

  trino:
    build:
      context: .
      dockerfile: Dockerfile.trino
    container_name: analytics_trino
    ports:
      - "8084:8080"
    volumes:
      - trino_data:/var/trino
      - ./trino/etc/jvm.config:/etc/trino/jvm.config
    user: "0:0"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - TRINO_JVM_MAX_HEAP_SIZE=2G
      - TRINO_DISCOVERY_URI=http://localhost:8080
      - TRINO_JVM_CONFIG=/etc/trino/jvm.config
    command: >
      /usr/lib/trino/bin/launcher run --etc-dir /etc/trino

  redis:
    image: redis:latest
    container_name: analytics_redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  superset:
    build:
      context: .
      dockerfile: Dockerfile.superset
    container_name: analytics_superset
    ports:
      - "8088:8088"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      trino:
        condition: service_started
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-analytics_db}
      - POSTGRES_USER=${POSTGRES_USER:-analytics}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-analytics123}
      - SUPERSET_SECRET_KEY=${SUPERSET_SECRET_KEY:-your-secret-key}
      - SUPERSET_ADMIN_USER=${SUPERSET_ADMIN_USER:-admin}
      - SUPERSET_ADMIN_PASSWORD=${SUPERSET_ADMIN_PASSWORD:-admin}
      - PYTHONPATH=/app/pythonpath
    volumes:
      - ./superset_config.py:/app/pythonpath/superset_config.py
      - superset_home:/app/superset_home
    command: >
      bash -c "
        superset db upgrade &&
        superset fab create-admin --username ${SUPERSET_ADMIN_USER:-admin} --firstname Admin --lastname User --email admin@example.com --password ${SUPERSET_ADMIN_PASSWORD:-admin} &&
        superset init &&
        superset run -p 8088 --host 0.0.0.0 --with-threads --reload --debug
      "

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: analytics_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "5050:80"
    depends_on:
      postgres:
        condition: service_healthy

volumes:
  postgres_data:
  superset_home:
  redis_data:
  trino_data:
  trino_etc:
  pgadmin_data: 